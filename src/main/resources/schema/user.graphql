extend type Query {
    users(offset: Int, limit: Int, filter: UserFilter, sort : UserSort): UserPageable!
    user(id: ID!): User
}

extend type Mutation {
    saveUser(id: ID, user: UserInput! @UserInput(personIdNullable: false)): User!
    deleteUser(id: ID!): Boolean
}

type UserPageable{
    items: [User!]!
    offset: Int!
    limit: Int!
    total: Int!
}

input UserFilter{
    name: String
    email: [String!] @Size(min: 10,max: 255) @ContainerSize(min: 2, max: 10)
    sex: Sex
}

enum Sex{
    MALE, FEMALE
}

type User{
    id: ID!
    name: String!
    email: String!
    sex: Sex
    personId: String
    createdAt: Instant!

    addressId: ID
    address: Address
    vehicles: [Vehicle!]
}

input UserInput{
    name: String! @Size(max: 255)
    email: String! @Size(min: 10, max: 255)
    sex: Sex
    personId: String
}

input UserSort{
    fields: [SortField!]!
}